include:
  - /.gitlab-ci/variables.yml

.build-base:
  stage: build-base
  image: "$DOCKER_BUILDER"
  services:
    - docker:24.0.5-dind
  script:
    - |
      export POETRY_CHECKSUM=$(sha1sum poetry.lock | awk '{print $1}')
      export POETRY_LOCK_SHA=${POETRY_CHECKSUM:0:8}
      export VERSION=$(cat .bumpversion.cfg | grep '^current_version' | sed 's/.*= //')
      export BASE=$(echo $VERSION | sed "s/\([0-9]*\)\.\([0-9]*\)\.\(.*\)/\1.\2/g")
      export BASE_SHA="$BASE-$POETRY_LOCK_SHA"
      export BUILD_DATE=$(date +"%Y-%m-%d %H:%M")
      export TARGET=${CI_REGISTRY_IMAGE}/${IMAGE_TYPE}:${BASE_SHA}
      echo "Docker target image: ${TARGET}"

    - |+
      docker build \
                --build-arg VERSION=${VERSION} \
                --build-arg BASE_SHA=${BASE_SHA} \
                --build-arg BUILD_DATE="${BUILD_DATE}" \
                --label "poetry-checksum=${POETRY_LOCK_SHA}" \
                --label "release-date=${BUILD_DATE}" \
                -t "${TARGET}" \
                -f docker/Dockerfile.${IMAGE_TYPE} .
    #    - docker-squash "${TARGET}.tmp" -t "${TARGET}"
    - docker tag "${TARGET}" "${CI_REGISTRY_IMAGE}/${IMAGE_TYPE}:latest"

    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker push ${TARGET}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_TYPE}:latest


.code:
  rules:
    - changes:
        - src/**/*
        - tests/**/*


stages:
  - debug
  - build-base
  - test
  - build
  - deploy


debug:
  stage: debug
  script:
    - env | sort | grep CI_
  rules:
    - when: always


build-docker-base:
  extends: .build-base
  variables:
    IMAGE_TYPE: "base"
  rules:
    - if: $CI_COMMIT_BRANCH != "develop"
      when: never
    - changes:
        - poetry.lock
        - pyproject.toml
        - docker/Dockerfile.base
        - docker/bin/*
        - docker/conf/*
    - if: $CI_COMMIT_MESSAGE =~ /build-base/ || "$FORCE_BUILD_BASE" == "1"
  after_script:
    - echo ${TARGET} > latest_built_image.txt


build-docker-test:
  extends: .build-base
  variables:
    IMAGE_TYPE: "test"
  rules:
    - if: $CI_COMMIT_BRANCH != "develop"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /build-base/ || "$FORCE_BUILD_BASE" == "1"
    - changes:
        - poetry.lock
        - docker/Dockerfile.base
        - docker/Dockerfile.test
        - docker/bin/*
        - docker/conf/*
  needs:
    - job: build-docker-base
      optional: false


.trivy:
  image: "$DOCKER_BUILDER"
  extends:
    - .build-base
  needs:
    - job: build-docker-base
      optional: false
  cache:
    paths:
      - .trivy-cache
  script:
    - |
      DOCKER_IMAGE=$(cat latest_built_image.txt)
      trivy --cache-dir .trivy-cache \
            image \
            --exit-code 0 \
            --no-progress \
            --format template \
            --template "@/templates/junit.tpl" \
            -o trivy.xml \
            $DOCKER_IMAGE
      trivy --cache-dir .trivy-cache \
            image \
            --exit-code 0 \
            --no-progress \
            --format template \
            --template "@/templates/gitlab.tpl" \
            -o trivy.json \
            $DOCKER_IMAGE
    - |
      ERRORS = jq '.vulnerabilities | length' trivy.json
      if [[ $ERRORS --gt 0 ]];
        COLOR = 'red'
        COUNT = $ERRORS
      else
        COLOR = 'green'
        COUNT = 'success'
      fi
    - anybadge -l trivy -v COUNT -c $COLOR -f trivy.svg

  artifacts:
    when: always
    reports:
      container_scanning: trivy.json
      junit: trivy.xml
    paths:
      - trivy.svg
    expire_in: 4 weeks

trivy base:
  extends: .trivy
  needs:
    - job: build-docker-base
      optional: false
  dependencies:
    - build-docker-base


lint:
  stage: test
  extends: .code
  image: "${CI_REGISTRY_IMAGE}/test:latest"
  needs:
    - job: build-docker-test
      optional: true
  script:
    - echo "run lint"
    - echo "<table>" > flake8.html
    - |
      flake8 src/ \
        --format='<tr><td>%(path)s</td><td>%(row)d,%(col)d</td><td>%(code)s</td><td>%(text)s</td></tr>' \
        --output-file flake8.html --tee
    - echo "</table>" >> flake8.html
  artifacts:
    when: always
    paths:
      - flake8.html
    expire_in: 5 days


test:
  stage: test
  extends: .code
  image: "${CI_REGISTRY_IMAGE}/test:latest"
  needs:
    - job: build-docker-test
      optional: true
  services:
    - docker:dind
    - name: redis:5.0.5-alpine
      alias: redis
      entrypoint: [ "redis-server", "--appendonly", "yes" ]
    - name: postgres:9.6
      alias: db
  variables:
    CACHE_CHAT: "redis://redis/2?client_class=django_redis.client.DefaultClient"
    CACHE_DEFAULT: "redis://redis/2?client_class=django_redis.client.DefaultClient"
    CELERY_BROKER_URL: "redis://redis/3"
    CELERY_TASK_ALWAYS_EAGER: "1"
    CHANNEL_URLS: "redis://redis/9"
    COVERAGE_FILE: "/tmp/.coverage_data"
    COVERAGE_RCFILE: "tests/.coveragerc"
    DATABASE_URL: "psql://postgres:pwd@db:5432/bob"
    FERNET_KEYS: "lkjhlkjhlkjhlkjhlkjhlkjhlkjh"
    SECRET_KEY: "verySuperSecret"
  script:
    - echo "run tests"
    - coverage run -m pytest --create-db -vv tests/
    - coverage report
    - coverage xml
    - coverage html
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - ./.build/coverage
    expire_in: 5 days


build:
  stage: build
  image: "$DOCKER_BUILDER"
  needs:
    - job: test
      optional: true
  script:
    - |
      export POETRY_CHECKSUM=$(sha1sum poetry.lock | awk '{print $1}')
      export POETRY_LOCK_SHA=${POETRY_CHECKSUM:0:8}
      export VERSION=$(cat .bumpversion.cfg | grep '^current_version' | sed 's/.*= //')
      export BASE=$(echo $VERSION | sed "s/\([0-9]*\)\.\([0-9]*\)\.\(.*\)/\1.\2/g")
      export BASE_SHA="$BASE-$POETRY_LOCK_SHA"
      export BUILD_DATE=$(date +"%Y-%m-%d %H:%M")

    - |
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        tag=":$CI_COMMIT_SHORT_SHA"
        VERSION="${VERSION} (develop)"
      elif [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then
        tag=":${VERSION}-rc-${CI_COMMIT_SHORT_SHA}"
      elif [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        tag=":${VERSION}"
      elif [[ -n "$CI_COMMIT_TAG" ]]; then
        tag=":$CI_COMMIT_TAG"
      fi
      echo "Running on branch '${CI_COMMIT_BRANCH}': tag = $tag"
      echo "Docker target image: ${CI_REGISTRY_IMAGE}${tag}"

    - |
      docker build --no-cache \
              --build-arg BASE_IMAGE="${BASE_SHA}" \
              --build-arg VERSION="${VERSION}" \
              --build-arg BUILD_DATE="${BUILD_DATE}" \
              --label "base=${BASE_SHA}" \
              --label "release-date=${BUILD_DATE}" \
              -t "${CI_REGISTRY_IMAGE}${tag}" -f docker/Dockerfile .

      if [[ "$CI_COMMIT_BRANCH" == "staging" || "$CI_COMMIT_BRANCH" == "master" ]]; then
        git tag $tag
      fi

    - docker-squash "$CI_REGISTRY_IMAGE${tag}" -t "$CI_REGISTRY_IMAGE${tag}"
    - docker tag "$CI_REGISTRY_IMAGE${tag}" "${CI_REGISTRY_IMAGE}:latest"
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker push "$CI_REGISTRY_IMAGE${tag}"
    - docker push ${CI_REGISTRY_IMAGE}:latest

    - echo $CI_REGISTRY_IMAGE${tag} > latest_built_image.txt
  artifacts:
    paths:
      - latest_built_image.txt
    expire_in: 1 week


#trivy image:
#  extends: .trivy
#  dependencies:
#    - build
#  needs:
#    - job: build
#      optional: false
#

deploy-dev:
  stage: deploy
  image: "$DOCKER_BUILDER"
  needs:
    - job: build
      optional: false
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes:
        - src/**/*
        - docker/**/*
        - pyproject.toml
        - poetry.lock
  environment:
    name: development
    url: https://dev.bitcasterbob.com
  variables:
    WORKER: "bitcaster-ns:bitcaster-dev"
  script:
    - |
      DOCKER_IMAGE=$(cat latest_built_image.txt)
      echo "deploy development"
      lazo rancher \
              --insecure \
              --use-names \
              --auth ${RANCHER_AUTH} \
              --base-url ${RANCHER_BASE_URL} \
              upgrade \
              --no-check \
              --workload ${WORKER} \
              --username saxix \
              --project ${RANCHER_PROJECT} \
              --password ${GITLAB_API_TOKEN} \
              -r http://registry.gitlab.com \
              -i ${DOCKER_IMAGE}



deploy-staging:
  stage: deploy
  image: "$DOCKER_BUILDER"
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  environment:
    name: staging
    url: https://qa.bitcasterbob.com
  dependencies:
    - build
  variables:
    WORKER: "bitcaster-ns:bitcaster-test-ci"
  script:
    - |
      DOCKER_IMAGE=$(cat latest_built_image.txt)
      echo "deploy staging"
      lazo rancher \
              --insecure \
              --use-names \
              --auth ${RANCHER_AUTH} \
              --base-url ${RANCHER_BASE_URL} \
              upgrade \
              --no-check \
              --workload ${WORKER} \
              --username saxix \
              --project ${RANCHER_PROJECT} \
              --password ${GITLAB_API_TOKEN} \
              -r http://registry.gitlab.com \
              -i ${DOCKER_IMAGE}



deploy-production:
  stage: deploy
  image: "$DOCKER_BUILDER"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  environment:
    name: production
    url: https://app.bitcasterbob.com
  dependencies:
    - build
  variables:
    WORKER: "bitcaster-ns:bitcaster-test-ci"
  script:
    - |
      DOCKER_IMAGE=$(cat latest_built_image.txt)
      echo "deploy production"
      lazo rancher \
              --insecure \
              --use-names \
              --auth ${RANCHER_AUTH} \
              --base-url ${RANCHER_BASE_URL} \
              upgrade \
              --no-check \
              --workload ${WORKER} \
              --username saxix \
              --project ${RANCHER_PROJECT} \
              --password ${GITLAB_API_TOKEN} \
              -r http://registry.gitlab.com \
              -i ${DOCKER_IMAGE}
