include:
  - /.gitlab/ci/variables.yml

stages:
  - base
  - builder
  - lint
  - images
  - scan-image
  - test
  - scan-code
  - release

.debug-rule:
  - when: always

.lint-rules:
  rules:
    - if: '$CI_COMMIT_MESSAGE=~ /skip_test/'
      when: never
    - if: '$CI_COMMIT_MESSAGE=~ /CI:(retest|force test)/'
      when: always
    - changes:
        - src/**/*
        - tests/**/*
        - pyproject.toml
        - mypy.ini


.test-rules:
  rules:
    - if: '$CI_COMMIT_MESSAGE=~ /skip_test/'
      when: never
    - if: '$CI_COMMIT_MESSAGE=~ /CI:(retest|force test)/'
      when: always
    - changes:
        - src/**/*
        - tests/**/*
        - pyproject.toml
        - pdm.lock

.docker-rules:
  rules:
    - if: '$CI_COMMIT_MESSAGE=~ /rebuild/'
      when: always
    - changes:
        - pdm.lock
        - docker/Dockerfile
        - docker/bin/*
        - docker/conf/*

.login: &login
  - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin

.build-docker: &build-docker
  - echo -e "${TXT_WHITE}Building target image ${DOCKER_IMAGE_TAG}${TXT_CLEAR}"
  - docker pull ${CI_REGISTRY_IMAGE}/builder:${BC_LOCK_SHA} || true
  - docker pull ${CI_REGISTRY_IMAGE}/builder-test:${BC_LOCK_SHA} || true
  - docker pull ${CI_REGISTRY_IMAGE}/builder:latest || true
  - docker build
    --progress=plain
    --build-arg BUILDKIT_INLINE_CACHE=1
    --build-arg VERSION=${BC_VERSION}
    --build-arg BUILD_DATE="${BC_BUILD_DATE}"
    --build-arg CHECKSUM="${BC_LOCK_SHA}"
    --build-arg COMMIT="${BC_COMMIT_SHA}"
    --cache-from ${CI_REGISTRY_IMAGE}/builder:${BC_LOCK_SHA}
    --cache-from ${CI_REGISTRY_IMAGE}/builder-test:${BC_LOCK_SHA}
    --cache-from ${CI_REGISTRY_IMAGE}/builder:latest
    --target $TARGET
    -t $DOCKER_IMAGE_TAG
    -f docker/Dockerfile .


.docker_sha: &docker_sha
  - export CI_CHECKSUM=$(sha1sum pdm.lock docker/Dockerfile docker/bin/* docker/conf/* | sha1sum | awk '{print $1}')

.exports: &exports
  - *docker_sha
  - |
    # export envs
    export BC_BUILD_DATE=$(date +"%Y-%m-%d %H:%M")
    export BC_BUILD_TIMESTAMP=$(date +"%Y%m%d%H%M%S")
    export BC_LOCK_SHA=$(echo ${CI_CHECKSUM} | cut -c 1-8)
    export BC_VERSION=$(cat .bumpversion.cfg | grep '^current_version' | sed 's/.*= //')
    export BC_COMMIT_SHA=c-${CI_COMMIT_SHA}

.build_base:
  image: "$DOCKER_BUILDER"
  extends:
    - .docker-rules
  services:
    - docker:24.0.5-dind
  cache:
    untracked: true
  before_script:
    - *exports
  script:
    - *login
    - *build-docker
    - | # -------------------------------       
      echo "Building image: $DOCKER_IMAGE"
      echo $DOCKER_IMAGE_TAG
    - docker tag "${DOCKER_IMAGE_TAG}" "${DOCKER_IMAGE}:latest"
    - docker push $DOCKER_IMAGE_TAG
    - docker push ${DOCKER_IMAGE}:latest
  allow_failure:
    exit_codes:
      - 64


docker-builder:
  stage: builder
  extends:
    - .build_base
  before_script:
    - *exports
    - export TARGET=builder
    - export DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/${TARGET}"
    - export DOCKER_IMAGE_TAG="${DOCKER_IMAGE}:${BC_LOCK_SHA}"


docker-builder-test:
  stage: builder
  extends:
    - .build_base
  needs:
    - docker-builder
  before_script:
    - *exports
    - export TARGET=builder-test
    - export DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/${TARGET}"
    - export DOCKER_IMAGE_TAG="${DOCKER_IMAGE}:${BC_LOCK_SHA}"


lint:
  image: "${CI_REGISTRY_IMAGE}/builder-test:latest"
  stage: lint
  extends:
    - .test-rules
  before_script:
    - *exports
  script:
    - echo -e "${TXT_HI_WHITE}Using Docker image ${TXT_HI_GREEN}${CI_JOB_IMAGE}${TXT_RESET}"
    - echo "run lint"
    - flake8 src/bitcaster --exit-zero --format=html --htmldir flake8/ --statistics --tee
    - black src/bitcaster --check > black.txt
    - mkdir -p public/junit
    - cp -R flake8 public/
  artifacts:
    when: always
    paths:
      - flake8/
      - black.txt
    expire_in: 5 days


trivy-docker:
  image: "$DOCKER_BUILDER"
  stage: scan-image
  extends:
    - .docker-rules
  services:
    - docker:dind
  cache:
    paths:
      - .trivy-cache
  before_script:
    - *exports
    - export DOCKER_IMAGE_TAG="${CI_REGISTRY_IMAGE}/builder:${BC_LOCK_SHA}"
  script:
    - *login
    - echo "Scanning $DOCKER_IMAGE_TAG"
    - trivy
      --cache-dir .trivy-cache
      image
      --exit-code 0
      --vuln-type os
      --no-progress
      --format template
      --template "@/templates/gitlab.tpl"
      -o trivy-docker.json
      ${DOCKER_IMAGE_TAG}
  artifacts:
    when: always
    reports:
      container_scanning: trivy-docker.json
      junit: trivy-docker.xml
    paths:
      - public
    expire_in: 4 weeks


bandit:
  image: "$DOCKER_BUILDER"
  stage: scan-code
  services:
    - docker:dind
  cache:
    paths:
      - .trivy-cache
  before_script:
    - *exports
  script:
    - *login
    - echo "Scanning code..."
    - pip install bandit
    - bandit -c bandit.yaml --format html -o bandit.html -r src/
  artifacts:
    when: always
    paths:
      - bandit.html
    expire_in: 4 weeks

trivy-code:
  image: "$DOCKER_BUILDER"
  stage: scan-code
  extends:
    - .docker-rules
  services:
    - docker:dind
  cache:
    paths:
      - .trivy-cache
  before_script:
    - *exports
    - export DOCKER_IMAGE_TAG="${CI_REGISTRY_IMAGE}/builder:${BC_LOCK_SHA}"
  script:
    - *login
    - echo "Scanning $DOCKER_IMAGE_TAG"
    - trivy
      --cache-dir .trivy-cache
      image
      --exit-code 0
      --vuln-type library
      --no-progress
      --format template
      --template "@/templates/gitlab.tpl"
      -o trivy-code.json
      ${DOCKER_IMAGE_TAG}
  artifacts:
    when: always
    reports:
      container_scanning: trivy-code.json
      junit: trivy-code.xml
    paths:
      - public
    expire_in: 4 weeks

test:
  stage: test
  image: "${CI_REGISTRY_IMAGE}/builder-test:latest"
  extends:
    - .test-rules
  services:
    - docker:dind
    - name: redis:5.0.5-alpine
      alias: redis
      entrypoint: [ "redis-server", "--appendonly", "yes" ]
    - name: postgres:14
      command: [ "postgres", "-c", "statement_timeout=120s" ]
      alias: db
  variables:
    TEST_DIR: tests/
    CACHE_URL: "redis://redis/2?client_class=django_redis.client.DefaultClient"
    CELERY_BROKER_URL: "redis://redis/3"
    CELERY_TASK_ALWAYS_EAGER: "1"
    CHANNEL_URLS: "redis://redis/9"
    COVERAGE_FILE: "tests/.coverage_data"
    COVERAGE_RCFILE: "tests/.coveragerc"
    DATABASE_URL: "postgres://postgres:pwd@db:5432/bitcaster"
    FERNET_KEYS: "lkjhlkjhlkjhlkjhlkjhlkjhlkjh"
    SECRET_KEY: "verySuperSecret"
    SECURE_HSTS_PRELOAD: False
    SECURE_SSL_REDIRECT: False
    SESSION_COOKIE_DOMAIN: localhost
    SESSION_COOKIE_SECURE: False
    SOCIAL_AUTH_REDIRECT_IS_HTTPS: False
  before_script:
    - *exports
    - export DOCKER_IMAGE_TAG="${CI_REGISTRY_IMAGE}/builder:${BC_LOCK_SHA}"
  script:
    - |
      # some info
      echo "run tests in '${TEST_DIR}'"
      echo -e "${TXT_HI_WHITE}Using Docker image ${TXT_HI_GREEN}${CI_JOB_IMAGE}${TXT_RESET}"
      echo "Version  ${BC_VERSION}"
      echo "Date     ${BC_BUILD_DATE}"
      echo "Tag      ${DOCKER_IMAGE_TAG}"
      echo "Checksum `cat /CHECKSUM`"
      echo "Tag      ${DOCKER_IMAGE_TAG}"
    - pytest tests/
      -ra
      --maxfail 10
      --migrations
      --create-db
      --junitxml=.build/junit/junit.xml
      --html=.build/junit/report.html
      --cov
      --cov-report=html
      --cov-report=xml
      --cov-report=term:skip-covered
    - pip install codecov
    - codecov upload-process -t $CODECOV_TOKEN
  after_script:
    - mkdir -p public
    - cp -R ./.build/* public
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    reports:
      junit: public/junit/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - public
    expire_in: 5 days


checkCoverage:
  stage: test
  image: alpine:latest
  allow_failure: true
  extends:
    - .test-rules
  variables:
    JOB_NAME: test
    TARGET_BRANCH: develop
    URL_ACTUAL_PIPELINE: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?private_token=${GITLAB_API_TOKEN}
    URL_PIPELINES: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines?ref=${TARGET_BRANCH}&status=success&private_token=${GITLAB_API_TOKEN}
  needs:
    - test
  before_script:
    - apk add --update --no-cache curl jq
  script:
    - | # ------
      echo "URL_PIPELINES $URL_PIPELINES"
      echo "URL_ACTUAL_PIPELINE $URL_ACTUAL_PIPELINE"
    - LATEST_PIPELINE_ID=`curl -s $URL_PIPELINES | jq ".[0].id"`
    - URL_LATEST_PIPELINE="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${LATEST_PIPELINE_ID}/jobs?private_token=${GITLAB_API_TOKEN}"
    - LATEST_COVERAGE=`curl -s $URL_LATEST_PIPELINE | jq --arg JOB_NAME "$JOB_NAME" '.[] | select(.name==$JOB_NAME) | .coverage'`
    - ACTUAL_COVERAGE=`curl -s $URL_ACTUAL_PIPELINE | jq --arg JOB_NAME "$JOB_NAME" '.[] | select(.name==$JOB_NAME) | .coverage'`
    - echo "COVERAGE:"
    - echo "Latest ${LATEST_COVERAGE}"
    - echo "Actual ${ACTUAL_COVERAGE}"
    - if  [ "$ACTUAL_COVERAGE" -lt "$LATEST_COVERAGE" ]; then echo "Coverage decreased from ${LATEST_COVERAGE} to ${ACTUAL_COVERAGE}" && exit 1; fi;


build:
  stage: release
  extends:
    - .build_base
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  rules:
    #    - if: $CI_COMMIT_REF_NAME == "develop"
    #      when: always
    #      variables:
    #        RELEASE: "nightly"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
      variables:
        RELEASE: "nightly"
    - if: $CI_COMMIT_REF_NAME =~ /release\/.*/
      when: always
      variables:
        RELEASE: "rc"
    - if: $CI_COMMIT_REF_NAME == "master"
      when: always
      variables:
        RELEASE: "final"
    - when: never
  before_script:
    - *exports
  script:
    - | # --
      if [ "$RELEASE" == "final" ]; then
        export DOCKER_IMAGE_TAG=$BC_VERSION
      elif [ "$RELEASE" == "rc" ]; then
        export DOCKER_IMAGE_TAG="${BC_VERSION}-rc"
      elif [ $CI_COMMIT_REF_NAME == "develop" ]; then
        export DOCKER_IMAGE_TAG="nightly"
      fi
    - | # --
      echo -e "${TXT_HI_GREEN}Building...${TXT_YELLOW}${CI_REGISTRY_IMAGE}:${DOCKER_IMAGE_TAG}"
    - env | sort | grep BC_
    - env | sort | grep CI_
#    - *login
#    - *build-docker
#    - docker tag $DOCKER_IMAGE_TAG ${DOCKER_IMAGE}:latest
#    - docker push ${DOCKER_IMAGE_TAG}
#    - docker push "${DOCKER_IMAGE}:latest"
#    - echo -e "${TXT_HI_GREEN}Pushed ${TXT_YELLOW}${DOCKER_IMAGE_TAG} ${TXT_RESET}"
#  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
#    tag_name: 'v0.$CI_PIPELINE_IID'                # The version is incremented per pipeline.
#    description: 'v0.$CI_PIPELINE_IID'
#    ref: '$CI_COMMIT_SHA'

pages:
  stage: release
  dependencies:
    - test
  allow_failure: true
  script:
    - cp .gitlab/pages/* public/
    - ls -l public
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - develop
